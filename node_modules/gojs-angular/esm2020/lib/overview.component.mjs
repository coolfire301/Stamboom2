import { Component, ElementRef, Input, NgZone, ViewChild } from '@angular/core';
import * as go from 'gojs';
import { NgDiagramHelper } from "./ng-diagram-helper";
import * as i0 from "@angular/core";
export class OverviewComponent {
    constructor(zone) {
        this.zone = zone;
        /** The Diagram to observe with the Overview */
        this.observedDiagram = null;
        /** The Overview itself  */
        this.overview = null;
    }
    /**
     * Initialize the overview
     */
    ngAfterViewInit() {
        if (!this.overviewDiv) {
            throw new Error("overviewDiv is not defined");
        }
        if (this.initOverview) {
            this.overview = this.initOverview();
            if (!(this.overview instanceof go.Overview)) {
                throw new Error("initOverview function did not return a go.Overview");
            }
        }
        else {
            this.overview = new go.Overview();
            this.overview.contentAlignment = go.Spot.Center;
        }
        // reduces change detection on mouse moves, boosting performance
        NgDiagramHelper.makeMouseMoveRunOutsideAngularZone(this.overview, this.zone);
        this.overview.div = this.overviewDiv.nativeElement;
    }
    /**
     * Only update when the observed diagram changes
     * @param changes
     */
    ngOnChanges(changes) {
        if (!this.overview)
            return;
        if (changes && changes.observedDiagram && changes.observedDiagram.currentValue !== changes.observedDiagram.previousValue) {
            this.overview.observed = changes.observedDiagram.currentValue;
        }
    }
    ngOnDestroy() {
        this.overview.div = null; // removes event listeners
    }
}
/** @nocollapse */ OverviewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.2", ngImport: i0, type: OverviewComponent, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ OverviewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.1.2", type: OverviewComponent, selector: "gojs-overview", inputs: { initOverview: "initOverview", divClassName: "divClassName", observedDiagram: "observedDiagram" }, viewQueries: [{ propertyName: "overviewDiv", first: true, predicate: ["ngOverview"], descendants: true, static: true }], usesOnChanges: true, ngImport: i0, template: '<div #ngOverview [className]=divClassName></div>', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.2", ngImport: i0, type: OverviewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'gojs-overview',
                    template: '<div #ngOverview [className]=divClassName></div>'
                }]
        }], ctorParameters: function () { return [{ type: i0.NgZone }]; }, propDecorators: { initOverview: [{
                type: Input
            }], divClassName: [{
                type: Input
            }], observedDiagram: [{
                type: Input
            }], overviewDiv: [{
                type: ViewChild,
                args: ['ngOverview', { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ZlcnZpZXcuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvZ29qcy1hbmd1bGFyL3NyYy9saWIvb3ZlcnZpZXcuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQWlCLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvRixPQUFPLEtBQUssRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMzQixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7O0FBTXRELE1BQU0sT0FBTyxpQkFBaUI7SUFjNUIsWUFBbUIsSUFBWTtRQUFaLFNBQUksR0FBSixJQUFJLENBQVE7UUFSL0IsK0NBQStDO1FBQy9CLG9CQUFlLEdBQWUsSUFBSSxDQUFDO1FBSW5ELDJCQUEyQjtRQUNwQixhQUFRLEdBQXVCLElBQUksQ0FBQztJQUVSLENBQUM7SUFFcEM7O09BRUc7SUFDSSxlQUFlO1FBQ3BCLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3JCLE1BQU0sSUFBSSxLQUFLLENBQUMsNEJBQTRCLENBQUMsQ0FBQztTQUMvQztRQUNELElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNyQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztZQUNwQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxZQUFZLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFBRTtnQkFDM0MsTUFBTSxJQUFJLEtBQUssQ0FBQyxvREFBb0QsQ0FBQyxDQUFDO2FBQ3ZFO1NBQ0Y7YUFBTTtZQUNMLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDbEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztTQUNqRDtRQUVELGdFQUFnRTtRQUNoRSxlQUFlLENBQUMsa0NBQWtDLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFN0UsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUM7SUFDckQsQ0FBQztJQUVEOzs7T0FHRztJQUNJLFdBQVcsQ0FBQyxPQUFzQjtRQUN2QyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVE7WUFBRSxPQUFPO1FBQzNCLElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxlQUFlLElBQUksT0FBTyxDQUFDLGVBQWUsQ0FBQyxZQUFZLEtBQUssT0FBTyxDQUFDLGVBQWUsQ0FBQyxhQUFhLEVBQUU7WUFDeEgsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBQyxZQUFZLENBQUM7U0FDL0Q7SUFDSCxDQUFDO0lBRU0sV0FBVztRQUNoQixJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQywwQkFBMEI7SUFDdEQsQ0FBQzs7aUlBcERVLGlCQUFpQjtxSEFBakIsaUJBQWlCLCtTQUZsQixrREFBa0Q7MkZBRWpELGlCQUFpQjtrQkFKN0IsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsZUFBZTtvQkFDekIsUUFBUSxFQUFFLGtEQUFrRDtpQkFDN0Q7NkZBSWlCLFlBQVk7c0JBQTNCLEtBQUs7Z0JBRVUsWUFBWTtzQkFBM0IsS0FBSztnQkFFVSxlQUFlO3NCQUE5QixLQUFLO2dCQUU0QyxXQUFXO3NCQUE1RCxTQUFTO3VCQUFDLFlBQVksRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIElucHV0LCBOZ1pvbmUsIFNpbXBsZUNoYW5nZXMsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgKiBhcyBnbyBmcm9tICdnb2pzJztcclxuaW1wb3J0IHsgTmdEaWFncmFtSGVscGVyIH0gZnJvbSBcIi4vbmctZGlhZ3JhbS1oZWxwZXJcIjtcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnZ29qcy1vdmVydmlldycsXHJcbiAgdGVtcGxhdGU6ICc8ZGl2ICNuZ092ZXJ2aWV3IFtjbGFzc05hbWVdPWRpdkNsYXNzTmFtZT48L2Rpdj4nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBPdmVydmlld0NvbXBvbmVudCB7XHJcblxyXG4gIC8qKiBUaGUgZnVuY3Rpb24gdXNlZCB0byBpbml0aWFsaXplIGFuZCByZXR1cm4gdGhlIE92ZXJ2aWV3ICovIFxyXG4gIEBJbnB1dCgpIHB1YmxpYyBpbml0T3ZlcnZpZXc6ICgpID0+IGdvLk92ZXJ2aWV3O1xyXG4gIC8qKiBUaGUgZGl2IGNsYXNzIG5hbWUgdGhhdCBob2xkcyB0aGUgT3ZlcnZpZXcuIFVzZSB0aGlzIG5hbWUgdG8gc3R5bGUgeW91ciBPdmVydmlldyBpbiBDU1MuICovXHJcbiAgQElucHV0KCkgcHVibGljIGRpdkNsYXNzTmFtZTogc3RyaW5nO1xyXG4gIC8qKiBUaGUgRGlhZ3JhbSB0byBvYnNlcnZlIHdpdGggdGhlIE92ZXJ2aWV3ICovXHJcbiAgQElucHV0KCkgcHVibGljIG9ic2VydmVkRGlhZ3JhbTogZ28uRGlhZ3JhbSA9IG51bGw7XHJcblxyXG4gIEBWaWV3Q2hpbGQoJ25nT3ZlcnZpZXcnLCB7IHN0YXRpYzogdHJ1ZSB9KSBwdWJsaWMgb3ZlcnZpZXdEaXY6IEVsZW1lbnRSZWY7XHJcblxyXG4gIC8qKiBUaGUgT3ZlcnZpZXcgaXRzZWxmICAqL1xyXG4gIHB1YmxpYyBvdmVydmlldzogZ28uT3ZlcnZpZXcgfCBudWxsID0gbnVsbDtcclxuXHJcbiAgY29uc3RydWN0b3IocHVibGljIHpvbmU6IE5nWm9uZSkgeyB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEluaXRpYWxpemUgdGhlIG92ZXJ2aWV3XHJcbiAgICovXHJcbiAgcHVibGljIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuICAgIGlmICghdGhpcy5vdmVydmlld0Rpdikge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJvdmVydmlld0RpdiBpcyBub3QgZGVmaW5lZFwiKTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzLmluaXRPdmVydmlldykge1xyXG4gICAgICB0aGlzLm92ZXJ2aWV3ID0gdGhpcy5pbml0T3ZlcnZpZXcoKTtcclxuICAgICAgaWYgKCEodGhpcy5vdmVydmlldyBpbnN0YW5jZW9mIGdvLk92ZXJ2aWV3KSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImluaXRPdmVydmlldyBmdW5jdGlvbiBkaWQgbm90IHJldHVybiBhIGdvLk92ZXJ2aWV3XCIpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLm92ZXJ2aWV3ID0gbmV3IGdvLk92ZXJ2aWV3KCk7XHJcbiAgICAgIHRoaXMub3ZlcnZpZXcuY29udGVudEFsaWdubWVudCA9IGdvLlNwb3QuQ2VudGVyO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHJlZHVjZXMgY2hhbmdlIGRldGVjdGlvbiBvbiBtb3VzZSBtb3ZlcywgYm9vc3RpbmcgcGVyZm9ybWFuY2VcclxuICAgIE5nRGlhZ3JhbUhlbHBlci5tYWtlTW91c2VNb3ZlUnVuT3V0c2lkZUFuZ3VsYXJab25lKHRoaXMub3ZlcnZpZXcsIHRoaXMuem9uZSk7XHJcblxyXG4gICAgdGhpcy5vdmVydmlldy5kaXYgPSB0aGlzLm92ZXJ2aWV3RGl2Lm5hdGl2ZUVsZW1lbnQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBPbmx5IHVwZGF0ZSB3aGVuIHRoZSBvYnNlcnZlZCBkaWFncmFtIGNoYW5nZXNcclxuICAgKiBAcGFyYW0gY2hhbmdlc1xyXG4gICAqL1xyXG4gIHB1YmxpYyBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XHJcbiAgICBpZiAoIXRoaXMub3ZlcnZpZXcpIHJldHVybjtcclxuICAgIGlmIChjaGFuZ2VzICYmIGNoYW5nZXMub2JzZXJ2ZWREaWFncmFtICYmIGNoYW5nZXMub2JzZXJ2ZWREaWFncmFtLmN1cnJlbnRWYWx1ZSAhPT0gY2hhbmdlcy5vYnNlcnZlZERpYWdyYW0ucHJldmlvdXNWYWx1ZSkge1xyXG4gICAgICB0aGlzLm92ZXJ2aWV3Lm9ic2VydmVkID0gY2hhbmdlcy5vYnNlcnZlZERpYWdyYW0uY3VycmVudFZhbHVlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIG5nT25EZXN0cm95KCkge1xyXG4gICAgdGhpcy5vdmVydmlldy5kaXYgPSBudWxsOyAvLyByZW1vdmVzIGV2ZW50IGxpc3RlbmVyc1xyXG4gIH1cclxuXHJcbn1cclxuIl19