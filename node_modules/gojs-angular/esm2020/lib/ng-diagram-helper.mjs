import * as go from "gojs";
/**
 * Defines some shared helper static functions, used in Diagram / Palette / Overview Components
 */
export class NgDiagramHelper {
    constructor() { }
    /**
     * Ensures mousemove event listeners on a diagram's canvas are run outside NgZone.
     * This way, change detection isn't triggered on each mousemove, improving performance.
     *
     * If some state-alteration must happen on a mousemove event inside the diagram, use zone.run() to make sure the event triggers angular change detection.
     * Used by DiagramComponent, PaletteComponent, and OverviewComponent in their ngAfterViewInit lifecycle hooks
     * @param diagram
     * @param zone
     */
    static makeMouseMoveRunOutsideAngularZone(diagram, zone) {
        diagram.addEventListener = (DOMElement, name, listener, capture) => {
            const superAddEventListener = go.Diagram.prototype.addEventListener;
            if (name === 'mousemove') {
                zone.runOutsideAngular(() => superAddEventListener.call(this, DOMElement, name, listener, capture));
            }
            else {
                zone.run(() => {
                    superAddEventListener.call(this, DOMElement, name, listener, capture);
                });
            }
        };
    }
    /**
     * Initialize a given diagram's model with given node / link / model data
     * @param diagram
     * @param nodeDataArray
     * @param linkDataArray
     * @param modelData
     */
    static initializeModel(diagram, nodeDataArray, linkDataArray, modelData) {
        diagram.delayInitialization(() => {
            const model = diagram.model;
            model.commit((m) => {
                if (modelData) {
                    m.assignAllDataProperties(m.modelData, modelData);
                }
                m.mergeNodeDataArray(m.cloneDeep(nodeDataArray));
                if (linkDataArray && m instanceof go.GraphLinksModel) {
                    m.mergeLinkDataArray(m.cloneDeep(linkDataArray));
                }
            }, null);
        });
    }
    /**
     * Initialize the model changed listener for the Palette / Diagram of a given compoennt; ensure it runs inside the component's ngZone.
     * Those changes will be emitted through a the component's modelChange EventEmitter.
     * @param component
     */
    static initializeModelChangedListener(component) {
        var diagram = null;
        if (!(component.hasOwnProperty("diagram")) && !(component.hasOwnProperty("palette")))
            return;
        if (component.hasOwnProperty("diagram"))
            diagram = component["diagram"];
        if (component.hasOwnProperty("palette"))
            diagram = component["palette"];
        component.modelChangedListener = (e) => {
            if (e.isTransactionFinished && e.model && !e.model.isReadOnly && component.modelChange) {
                // this must be done within a NgZone.run block, so changes are detected in the parent component
                component.zone.run(() => {
                    const dataChanges = e.model.toIncrementalData(e);
                    if (dataChanges !== null)
                        component.modelChange.emit(dataChanges);
                });
            }
        };
        diagram.addModelChangedListener(component.modelChangedListener);
    }
    /**
     * Merge the app-level node / link / model data of a supplied Diagram|Palette Component with its underlying Diagram|Palette model data
     * @param component
     * @param isInit Whether or not to treat this update as a Diagram initialization
     */
    static mergeAppDataWithModel(component, isInit) {
        var diagram = null;
        if (component.hasOwnProperty("diagram"))
            diagram = component["diagram"];
        if (component.hasOwnProperty("palette"))
            diagram = component["palette"];
        diagram.model.commit((m) => {
            if (isInit)
                diagram.model.modelData = {};
            // update modelData first, in case bindings on nodes / links depend on model data
            diagram.model.assignAllDataProperties(diagram.model.modelData, component.modelData);
            // merge node / link data
            if (isInit)
                diagram.model.nodeDataArray = [];
            diagram.model.mergeNodeDataArray(component.nodeDataArray);
            if (component.linkDataArray && diagram.model instanceof go.GraphLinksModel) {
                if (isInit)
                    diagram.model.linkDataArray = [];
                diagram.model.mergeLinkDataArray(component.linkDataArray);
            }
        }, isInit ? null : 'update data');
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctZGlhZ3JhbS1oZWxwZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9nb2pzLWFuZ3VsYXIvc3JjL2xpYi9uZy1kaWFncmFtLWhlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEtBQUssRUFBRSxNQUFNLE1BQU0sQ0FBQztBQWdCM0I7O0dBRUc7QUFDSCxNQUFNLE9BQU8sZUFBZTtJQUMxQixnQkFBZSxDQUFDO0lBRWhCOzs7Ozs7OztPQVFHO0lBQ0ksTUFBTSxDQUFDLGtDQUFrQyxDQUFDLE9BQW1CLEVBQUUsSUFBWTtRQUNoRixPQUFPLENBQUMsZ0JBQWdCLEdBQUcsQ0FBQyxVQUF1QyxFQUFFLElBQVksRUFBRSxRQUFhLEVBQUUsT0FBZ0IsRUFBRSxFQUFFO1lBQ3BILE1BQU0scUJBQXFCLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUM7WUFDcEUsSUFBSSxJQUFJLEtBQUssV0FBVyxFQUFFO2dCQUN4QixJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO2FBQ3JHO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFO29CQUNaLHFCQUFxQixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7Z0JBQ3hFLENBQUMsQ0FBQyxDQUFDO2FBQ0o7UUFDSCxDQUFDLENBQUM7SUFDSixDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0ksTUFBTSxDQUFDLGVBQWUsQ0FBQyxPQUFnQyxFQUFFLGFBQW1DLEVBQUUsYUFBbUMsRUFBRSxTQUF3QjtRQUNoSyxPQUFPLENBQUMsbUJBQW1CLENBQUMsR0FB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QWEsR0FBRyxFQUFFLENBQUM7WUFDN0MsT0FBTyxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDMUQsSUFBSSxTQUFTLENBQUMsYUFBYSxJQUFJLE9BQU8sQ0FBQyxLQUFLLFlBQVksRUFBRSxDQUFDLGVBQWUsRUFBRTtnQkFDMUUsSUFBSSxNQUFNO29CQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsYUFBYSxHQUFHLEVBQUUsQ0FBQztnQkFDN0MsT0FBTyxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLENBQUM7YUFDM0Q7UUFDSCxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBRXBDLENBQUM7Q0FFRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nWm9uZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gXCJldmVudHNcIjtcclxuaW1wb3J0ICogYXMgZ28gZnJvbSBcImdvanNcIjtcclxuaW1wb3J0IHsgRGlhZ3JhbUNvbXBvbmVudCB9IGZyb20gXCIuL2RpYWdyYW0uY29tcG9uZW50XCI7XHJcblxyXG4vKipcclxuICogQW4gaW50ZXJmYWNlIHRvIGFsbG93IG1ldGhvZHMgZGVmaW5lZCBiZWxvdyB0byBhY2NlcHQgUGFsZXR0ZSBvciBEaWFncmFtIENvbXBvbmVudHMsXHJcbiAqIHdpdGhvdXQgcmVxdWlyaW5nIERpYWdyYW1Db21wb25lbnQgb3IgUGFsZXR0ZUNvbXBvbmVudCBkaXJlY3RseSBpbiB0aGlzIGZpbGVcclxuICogKHRoYXQgd291bGQgY3JlYXRlIGEgY2lyY3VsYXIgZGVwZW5kZW5jeSlcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSURpYWdyYW1PclBhbGV0dGVDb21wb25lbnQge1xyXG4gIG1vZGVsQ2hhbmdlOiBFdmVudEVtaXR0ZXI8Z28uSW5jcmVtZW50YWxEYXRhPixcclxuICB6b25lOiBOZ1pvbmUsXHJcbiAgbm9kZURhdGFBcnJheTogQXJyYXk8Z28uT2JqZWN0RGF0YT4sXHJcbiAgbGlua0RhdGFBcnJheTogQXJyYXk8Z28uT2JqZWN0RGF0YT4sXHJcbiAgbW9kZWxEYXRhOiBnby5PYmplY3REYXRhXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBEZWZpbmVzIHNvbWUgc2hhcmVkIGhlbHBlciBzdGF0aWMgZnVuY3Rpb25zLCB1c2VkIGluIERpYWdyYW0gLyBQYWxldHRlIC8gT3ZlcnZpZXcgQ29tcG9uZW50c1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIE5nRGlhZ3JhbUhlbHBlcntcclxuICBjb25zdHJ1Y3RvcigpIHt9XHJcblxyXG4gIC8qKlxyXG4gICAqIEVuc3VyZXMgbW91c2Vtb3ZlIGV2ZW50IGxpc3RlbmVycyBvbiBhIGRpYWdyYW0ncyBjYW52YXMgYXJlIHJ1biBvdXRzaWRlIE5nWm9uZS5cclxuICAgKiBUaGlzIHdheSwgY2hhbmdlIGRldGVjdGlvbiBpc24ndCB0cmlnZ2VyZWQgb24gZWFjaCBtb3VzZW1vdmUsIGltcHJvdmluZyBwZXJmb3JtYW5jZS5cclxuICAgKlxyXG4gICAqIElmIHNvbWUgc3RhdGUtYWx0ZXJhdGlvbiBtdXN0IGhhcHBlbiBvbiBhIG1vdXNlbW92ZSBldmVudCBpbnNpZGUgdGhlIGRpYWdyYW0sIHVzZSB6b25lLnJ1bigpIHRvIG1ha2Ugc3VyZSB0aGUgZXZlbnQgdHJpZ2dlcnMgYW5ndWxhciBjaGFuZ2UgZGV0ZWN0aW9uLlxyXG4gICAqIFVzZWQgYnkgRGlhZ3JhbUNvbXBvbmVudCwgUGFsZXR0ZUNvbXBvbmVudCwgYW5kIE92ZXJ2aWV3Q29tcG9uZW50IGluIHRoZWlyIG5nQWZ0ZXJWaWV3SW5pdCBsaWZlY3ljbGUgaG9va3NcclxuICAgKiBAcGFyYW0gZGlhZ3JhbVxyXG4gICAqIEBwYXJhbSB6b25lXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBtYWtlTW91c2VNb3ZlUnVuT3V0c2lkZUFuZ3VsYXJab25lKGRpYWdyYW06IGdvLkRpYWdyYW0sIHpvbmU6IE5nWm9uZSkge1xyXG4gICAgZGlhZ3JhbS5hZGRFdmVudExpc3RlbmVyID0gKERPTUVsZW1lbnQ6IEVsZW1lbnQgfCBXaW5kb3cgfCBEb2N1bWVudCwgbmFtZTogc3RyaW5nLCBsaXN0ZW5lcjogYW55LCBjYXB0dXJlOiBib29sZWFuKSA9PiB7XHJcbiAgICAgIGNvbnN0IHN1cGVyQWRkRXZlbnRMaXN0ZW5lciA9IGdvLkRpYWdyYW0ucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXI7XHJcbiAgICAgIGlmIChuYW1lID09PSAnbW91c2Vtb3ZlJykge1xyXG4gICAgICAgIHpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4gc3VwZXJBZGRFdmVudExpc3RlbmVyLmNhbGwodGhpcywgRE9NRWxlbWVudCwgbmFtZSwgbGlzdGVuZXIsIGNhcHR1cmUpKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB6b25lLnJ1bigoKSA9PiB7XHJcbiAgICAgICAgICBzdXBlckFkZEV2ZW50TGlzdGVuZXIuY2FsbCh0aGlzLCBET01FbGVtZW50LCBuYW1lLCBsaXN0ZW5lciwgY2FwdHVyZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBJbml0aWFsaXplIGEgZ2l2ZW4gZGlhZ3JhbSdzIG1vZGVsIHdpdGggZ2l2ZW4gbm9kZSAvIGxpbmsgLyBtb2RlbCBkYXRhXHJcbiAgICogQHBhcmFtIGRpYWdyYW1cclxuICAgKiBAcGFyYW0gbm9kZURhdGFBcnJheVxyXG4gICAqIEBwYXJhbSBsaW5rRGF0YUFycmF5XHJcbiAgICogQHBhcmFtIG1vZGVsRGF0YVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgaW5pdGlhbGl6ZU1vZGVsKGRpYWdyYW06IGdvLkRpYWdyYW0gfCBnby5QYWxldHRlLCBub2RlRGF0YUFycmF5OiBBcnJheTxnby5PYmplY3REYXRhPiwgbGlua0RhdGFBcnJheTogQXJyYXk8Z28uT2JqZWN0RGF0YT4sIG1vZGVsRGF0YTogZ28uT2JqZWN0RGF0YSkge1xyXG4gICAgZGlhZ3JhbS5kZWxheUluaXRpYWxpemF0aW9uKCgpID0+IHtcclxuICAgICAgY29uc3QgbW9kZWwgPSBkaWFncmFtLm1vZGVsO1xyXG4gICAgICBtb2RlbC5jb21taXQoKG06IGdvLk1vZGVsKSA9PiB7XHJcbiAgICAgICAgaWYgKG1vZGVsRGF0YSkge1xyXG4gICAgICAgICAgbS5hc3NpZ25BbGxEYXRhUHJvcGVydGllcyhtLm1vZGVsRGF0YSwgbW9kZWxEYXRhKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbS5tZXJnZU5vZGVEYXRhQXJyYXkobS5jbG9uZURlZXAobm9kZURhdGFBcnJheSkpO1xyXG4gICAgICAgIGlmIChsaW5rRGF0YUFycmF5ICYmIG0gaW5zdGFuY2VvZiBnby5HcmFwaExpbmtzTW9kZWwpIHtcclxuICAgICAgICAgIG0ubWVyZ2VMaW5rRGF0YUFycmF5KG0uY2xvbmVEZWVwKGxpbmtEYXRhQXJyYXkpKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0sIG51bGwpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBJbml0aWFsaXplIHRoZSBtb2RlbCBjaGFuZ2VkIGxpc3RlbmVyIGZvciB0aGUgUGFsZXR0ZSAvIERpYWdyYW0gb2YgYSBnaXZlbiBjb21wb2VubnQ7IGVuc3VyZSBpdCBydW5zIGluc2lkZSB0aGUgY29tcG9uZW50J3Mgbmdab25lLlxyXG4gICAqIFRob3NlIGNoYW5nZXMgd2lsbCBiZSBlbWl0dGVkIHRocm91Z2ggYSB0aGUgY29tcG9uZW50J3MgbW9kZWxDaGFuZ2UgRXZlbnRFbWl0dGVyLlxyXG4gICAqIEBwYXJhbSBjb21wb25lbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGluaXRpYWxpemVNb2RlbENoYW5nZWRMaXN0ZW5lcihjb21wb25lbnQ6IERpYWdyYW1Db21wb25lbnQpIHtcclxuICAgIHZhciBkaWFncmFtID0gbnVsbDtcclxuICAgIGlmICghKGNvbXBvbmVudC5oYXNPd25Qcm9wZXJ0eShcImRpYWdyYW1cIikpICYmICEoY29tcG9uZW50Lmhhc093blByb3BlcnR5KFwicGFsZXR0ZVwiKSkpIHJldHVybjtcclxuICAgIGlmIChjb21wb25lbnQuaGFzT3duUHJvcGVydHkoXCJkaWFncmFtXCIpKSBkaWFncmFtID0gY29tcG9uZW50W1wiZGlhZ3JhbVwiXTtcclxuICAgIGlmIChjb21wb25lbnQuaGFzT3duUHJvcGVydHkoXCJwYWxldHRlXCIpKSBkaWFncmFtID0gY29tcG9uZW50W1wicGFsZXR0ZVwiXTtcclxuICAgIGNvbXBvbmVudC5tb2RlbENoYW5nZWRMaXN0ZW5lciA9IChlOiBnby5DaGFuZ2VkRXZlbnQpID0+IHtcclxuICAgICAgaWYgKGUuaXNUcmFuc2FjdGlvbkZpbmlzaGVkICYmIGUubW9kZWwgJiYgIWUubW9kZWwuaXNSZWFkT25seSAmJiBjb21wb25lbnQubW9kZWxDaGFuZ2UpIHtcclxuICAgICAgICAvLyB0aGlzIG11c3QgYmUgZG9uZSB3aXRoaW4gYSBOZ1pvbmUucnVuIGJsb2NrLCBzbyBjaGFuZ2VzIGFyZSBkZXRlY3RlZCBpbiB0aGUgcGFyZW50IGNvbXBvbmVudFxyXG4gICAgICAgIGNvbXBvbmVudC56b25lLnJ1bigoKSA9PiB7XHJcbiAgICAgICAgICBjb25zdCBkYXRhQ2hhbmdlcyA9IGUubW9kZWwhLnRvSW5jcmVtZW50YWxEYXRhKGUpO1xyXG4gICAgICAgICAgaWYgKGRhdGFDaGFuZ2VzICE9PSBudWxsKSBjb21wb25lbnQubW9kZWxDaGFuZ2UuZW1pdChkYXRhQ2hhbmdlcyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICBkaWFncmFtLmFkZE1vZGVsQ2hhbmdlZExpc3RlbmVyKGNvbXBvbmVudC5tb2RlbENoYW5nZWRMaXN0ZW5lcik7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBNZXJnZSB0aGUgYXBwLWxldmVsIG5vZGUgLyBsaW5rIC8gbW9kZWwgZGF0YSBvZiBhIHN1cHBsaWVkIERpYWdyYW18UGFsZXR0ZSBDb21wb25lbnQgd2l0aCBpdHMgdW5kZXJseWluZyBEaWFncmFtfFBhbGV0dGUgbW9kZWwgZGF0YVxyXG4gICAqIEBwYXJhbSBjb21wb25lbnRcclxuICAgKiBAcGFyYW0gaXNJbml0IFdoZXRoZXIgb3Igbm90IHRvIHRyZWF0IHRoaXMgdXBkYXRlIGFzIGEgRGlhZ3JhbSBpbml0aWFsaXphdGlvblxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgbWVyZ2VBcHBEYXRhV2l0aE1vZGVsKGNvbXBvbmVudDogSURpYWdyYW1PclBhbGV0dGVDb21wb25lbnQsIGlzSW5pdD86IGJvb2xlYW4pIHtcclxuICAgIHZhciBkaWFncmFtID0gbnVsbDtcclxuICAgIGlmIChjb21wb25lbnQuaGFzT3duUHJvcGVydHkoXCJkaWFncmFtXCIpKSBkaWFncmFtID0gY29tcG9uZW50W1wiZGlhZ3JhbVwiXTtcclxuICAgIGlmIChjb21wb25lbnQuaGFzT3duUHJvcGVydHkoXCJwYWxldHRlXCIpKSBkaWFncmFtID0gY29tcG9uZW50W1wicGFsZXR0ZVwiXTtcclxuXHJcbiAgICBkaWFncmFtLm1vZGVsLmNvbW1pdCgobTogZ28uTW9kZWwpID0+IHtcclxuICAgICAgaWYgKGlzSW5pdCkgZGlhZ3JhbS5tb2RlbC5tb2RlbERhdGEgPSB7fTtcclxuICAgICAgLy8gdXBkYXRlIG1vZGVsRGF0YSBmaXJzdCwgaW4gY2FzZSBiaW5kaW5ncyBvbiBub2RlcyAvIGxpbmtzIGRlcGVuZCBvbiBtb2RlbCBkYXRhXHJcbiAgICAgIGRpYWdyYW0ubW9kZWwuYXNzaWduQWxsRGF0YVByb3BlcnRpZXMoZGlhZ3JhbS5tb2RlbC5tb2RlbERhdGEsIGNvbXBvbmVudC5tb2RlbERhdGEpO1xyXG4gICAgICAvLyBtZXJnZSBub2RlIC8gbGluayBkYXRhXHJcbiAgICAgIGlmIChpc0luaXQpIGRpYWdyYW0ubW9kZWwubm9kZURhdGFBcnJheSA9IFtdO1xyXG4gICAgICBkaWFncmFtLm1vZGVsLm1lcmdlTm9kZURhdGFBcnJheShjb21wb25lbnQubm9kZURhdGFBcnJheSk7XHJcbiAgICAgIGlmIChjb21wb25lbnQubGlua0RhdGFBcnJheSAmJiBkaWFncmFtLm1vZGVsIGluc3RhbmNlb2YgZ28uR3JhcGhMaW5rc01vZGVsKSB7XHJcbiAgICAgICAgaWYgKGlzSW5pdCkgZGlhZ3JhbS5tb2RlbC5saW5rRGF0YUFycmF5ID0gW107XHJcbiAgICAgICAgZGlhZ3JhbS5tb2RlbC5tZXJnZUxpbmtEYXRhQXJyYXkoY29tcG9uZW50LmxpbmtEYXRhQXJyYXkpO1xyXG4gICAgICB9XHJcbiAgICB9LCBpc0luaXQgPyBudWxsIDogJ3VwZGF0ZSBkYXRhJyk7XHJcblxyXG4gIH1cclxuXHJcbn1cclxuIl19