import { Component, ElementRef, EventEmitter, Input, NgZone, Output, ViewChild } from '@angular/core';
import * as go from 'gojs';
import { NgDiagramHelper } from './ng-diagram-helper';
import * as i0 from "@angular/core";
export class PaletteComponent {
    constructor(zone) {
        this.zone = zone;
        /** Link data for palette. Optional. */
        this.linkDataArray = null;
        /** Model data for palette. Optional. */
        this.modelData = null;
        /** Event emitter -- fires when palette model changes. Capture this emitted event in parent component */
        this.modelChange = new EventEmitter();
        /** The Palette itself */
        this.palette = null;
    }
    /**
     * Initialize Palette after view init
     */
    ngAfterViewInit() {
        if (!this.paletteDiv) {
            throw new Error("paletteDiv is not defined");
        }
        this.palette = this.initPalette();
        if (!(this.palette instanceof go.Palette)) {
            throw new Error("initPalette function did not return a go.Palette");
        }
        // reduces change detection on mouse moves, boosting performance
        NgDiagramHelper.makeMouseMoveRunOutsideAngularZone(this.palette, this.zone);
        // assign the Palette's div, which (among many other things) will attach a bunch of listeners to the canvas,
        // using the overridden addEventListener function above
        const divRef = this.paletteDiv.nativeElement;
        if (divRef == null)
            return;
        this.palette.div = divRef;
        // initialize palette model
        NgDiagramHelper.initializeModel(this.palette, this.nodeDataArray, this.linkDataArray, this.modelData);
    }
    /**
     * If a change has occured on an @Input property, merge the app-level changes with GoJS
     */
    ngOnChanges() {
        if (!this.palette || !this.palette.model)
            return;
        NgDiagramHelper.mergeAppDataWithModel(this);
    } // end ngOnChanges 
    ngOnDestroy() {
        this.palette.div = null; // removes event listeners
    }
}
/** @nocollapse */ PaletteComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.2", ngImport: i0, type: PaletteComponent, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PaletteComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.1.2", type: PaletteComponent, selector: "gojs-palette", inputs: { initPalette: "initPalette", nodeDataArray: "nodeDataArray", linkDataArray: "linkDataArray", modelData: "modelData", divClassName: "divClassName" }, outputs: { modelChange: "modelChange" }, viewQueries: [{ propertyName: "paletteDiv", first: true, predicate: ["ngPalette"], descendants: true, static: true }], usesOnChanges: true, ngImport: i0, template: '<div #ngPalette [className]=divClassName></div>', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.2", ngImport: i0, type: PaletteComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'gojs-palette',
                    template: '<div #ngPalette [className]=divClassName></div>'
                }]
        }], ctorParameters: function () { return [{ type: i0.NgZone }]; }, propDecorators: { initPalette: [{
                type: Input
            }], nodeDataArray: [{
                type: Input
            }], linkDataArray: [{
                type: Input
            }], modelData: [{
                type: Input
            }], divClassName: [{
                type: Input
            }], modelChange: [{
                type: Output
            }], paletteDiv: [{
                type: ViewChild,
                args: ['ngPalette', { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFsZXR0ZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9nb2pzLWFuZ3VsYXIvc3JjL2xpYi9wYWxldHRlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3RHLE9BQU8sS0FBSyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzNCLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQzs7QUFLdEQsTUFBTSxPQUFPLGdCQUFnQjtJQXdCM0IsWUFBbUIsSUFBWTtRQUFaLFNBQUksR0FBSixJQUFJLENBQVE7UUFmL0IsdUNBQXVDO1FBQ3ZCLGtCQUFhLEdBQXlCLElBQUksQ0FBQztRQUMzRCx3Q0FBd0M7UUFDeEIsY0FBUyxHQUFrQixJQUFJLENBQUM7UUFJaEQsd0dBQXdHO1FBQ3ZGLGdCQUFXLEdBQXFDLElBQUksWUFBWSxFQUFzQixDQUFDO1FBSXhHLHlCQUF5QjtRQUNsQixZQUFPLEdBQXNCLElBQUksQ0FBQztJQUVMLENBQUM7SUFFckM7O09BRUc7SUFDSSxlQUFlO1FBQ3BCLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ3BCLE1BQU0sSUFBSSxLQUFLLENBQUMsMkJBQTJCLENBQUMsQ0FBQztTQUM5QztRQUNELElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ2xDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLFlBQVksRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ3pDLE1BQU0sSUFBSSxLQUFLLENBQUMsa0RBQWtELENBQUMsQ0FBQztTQUNyRTtRQUVELGdFQUFnRTtRQUNoRSxlQUFlLENBQUMsa0NBQWtDLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFNUUsNEdBQTRHO1FBQzVHLHVEQUF1RDtRQUN2RCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQztRQUM3QyxJQUFJLE1BQU0sSUFBSSxJQUFJO1lBQUUsT0FBTztRQUMzQixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUM7UUFFMUIsMkJBQTJCO1FBQzNCLGVBQWUsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3hHLENBQUM7SUFFRDs7T0FFRztJQUNJLFdBQVc7UUFDaEIsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUs7WUFBRSxPQUFPO1FBQ2pELGVBQWUsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM5QyxDQUFDLENBQUMsbUJBQW1CO0lBR2QsV0FBVztRQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQywwQkFBMEI7SUFDckQsQ0FBQzs7Z0lBOURVLGdCQUFnQjtvSEFBaEIsZ0JBQWdCLHVZQUZqQixpREFBaUQ7MkZBRWhELGdCQUFnQjtrQkFKNUIsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsY0FBYztvQkFDeEIsUUFBUSxFQUFFLGlEQUFpRDtpQkFDNUQ7NkZBT2lCLFdBQVc7c0JBQTFCLEtBQUs7Z0JBRVUsYUFBYTtzQkFBNUIsS0FBSztnQkFFVSxhQUFhO3NCQUE1QixLQUFLO2dCQUVVLFNBQVM7c0JBQXhCLEtBQUs7Z0JBRVUsWUFBWTtzQkFBM0IsS0FBSztnQkFHVyxXQUFXO3NCQUEzQixNQUFNO2dCQUUwQyxVQUFVO3NCQUExRCxTQUFTO3VCQUFDLFdBQVcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE5nWm9uZSwgT3V0cHV0LCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0ICogYXMgZ28gZnJvbSAnZ29qcyc7XHJcbmltcG9ydCB7IE5nRGlhZ3JhbUhlbHBlciB9IGZyb20gJy4vbmctZGlhZ3JhbS1oZWxwZXInO1xyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2dvanMtcGFsZXR0ZScsXHJcbiAgdGVtcGxhdGU6ICc8ZGl2ICNuZ1BhbGV0dGUgW2NsYXNzTmFtZV09ZGl2Q2xhc3NOYW1lPjwvZGl2PidcclxufSlcclxuZXhwb3J0IGNsYXNzIFBhbGV0dGVDb21wb25lbnQge1xyXG5cclxuICAvKipcclxuICAgKiBQYWxldHRlIGluaXRpYWxpemF0aW9uIGZ1bmN0aW9uLiBSZXR1cm5zIGEgZ28uUGFsZXR0ZS5cclxuICAgKiBEbyBub3QgaW5pdGlhbGl6ZSBtb2RlbCBkYXRhIGluIHRoaXMgZnVuY3Rpb24uXHJcbiAgICovXHJcbiAgQElucHV0KCkgcHVibGljIGluaXRQYWxldHRlOiAoKSA9PiBnby5QYWxldHRlO1xyXG4gIC8qKiBOb2RlIGRhdGEgZm9yIHBhbGV0dGUgKi9cclxuICBASW5wdXQoKSBwdWJsaWMgbm9kZURhdGFBcnJheTogQXJyYXk8Z28uT2JqZWN0RGF0YT47XHJcbiAgLyoqIExpbmsgZGF0YSBmb3IgcGFsZXR0ZS4gT3B0aW9uYWwuICovXHJcbiAgQElucHV0KCkgcHVibGljIGxpbmtEYXRhQXJyYXk6IEFycmF5PGdvLk9iamVjdERhdGE+ID0gbnVsbDtcclxuICAvKiogTW9kZWwgZGF0YSBmb3IgcGFsZXR0ZS4gT3B0aW9uYWwuICovXHJcbiAgQElucHV0KCkgcHVibGljIG1vZGVsRGF0YTogZ28uT2JqZWN0RGF0YSA9IG51bGw7XHJcbiAgLyoqIFBhbGV0dGUgZGl2IGNsYXNzIG5hbWUuIFVzZSB0aGlzIG5hbWUgdG8gc3R5bGUgeW91ciBwYWxldHRlIGluIENTUyAqL1xyXG4gIEBJbnB1dCgpIHB1YmxpYyBkaXZDbGFzc05hbWU6IHN0cmluZztcclxuXHJcbiAgLyoqIEV2ZW50IGVtaXR0ZXIgLS0gZmlyZXMgd2hlbiBwYWxldHRlIG1vZGVsIGNoYW5nZXMuIENhcHR1cmUgdGhpcyBlbWl0dGVkIGV2ZW50IGluIHBhcmVudCBjb21wb25lbnQgKi9cclxuICBAT3V0cHV0KCkgcHVibGljIG1vZGVsQ2hhbmdlOiBFdmVudEVtaXR0ZXI8Z28uSW5jcmVtZW50YWxEYXRhPiA9IG5ldyBFdmVudEVtaXR0ZXI8Z28uSW5jcmVtZW50YWxEYXRhPigpO1xyXG4gIC8qKiBUaGUgRElWIGVsZW1lbnQgaG9sZGluZyB0aGUgUGFsZXR0ZSAqL1xyXG4gIEBWaWV3Q2hpbGQoJ25nUGFsZXR0ZScsIHsgc3RhdGljOiB0cnVlIH0pIHB1YmxpYyBwYWxldHRlRGl2OiBFbGVtZW50UmVmO1xyXG5cclxuICAvKiogVGhlIFBhbGV0dGUgaXRzZWxmICovXHJcbiAgcHVibGljIHBhbGV0dGU6IGdvLlBhbGV0dGUgfCBudWxsID0gbnVsbDtcclxuXHJcbiAgY29uc3RydWN0b3IocHVibGljIHpvbmU6IE5nWm9uZSkgeyAgfSBcclxuXHJcbiAgLyoqXHJcbiAgICogSW5pdGlhbGl6ZSBQYWxldHRlIGFmdGVyIHZpZXcgaW5pdFxyXG4gICAqL1xyXG4gIHB1YmxpYyBuZ0FmdGVyVmlld0luaXQoKSB7XHJcbiAgICBpZiAoIXRoaXMucGFsZXR0ZURpdikge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJwYWxldHRlRGl2IGlzIG5vdCBkZWZpbmVkXCIpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5wYWxldHRlID0gdGhpcy5pbml0UGFsZXR0ZSgpO1xyXG4gICAgaWYgKCEodGhpcy5wYWxldHRlIGluc3RhbmNlb2YgZ28uUGFsZXR0ZSkpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaW5pdFBhbGV0dGUgZnVuY3Rpb24gZGlkIG5vdCByZXR1cm4gYSBnby5QYWxldHRlXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHJlZHVjZXMgY2hhbmdlIGRldGVjdGlvbiBvbiBtb3VzZSBtb3ZlcywgYm9vc3RpbmcgcGVyZm9ybWFuY2VcclxuICAgIE5nRGlhZ3JhbUhlbHBlci5tYWtlTW91c2VNb3ZlUnVuT3V0c2lkZUFuZ3VsYXJab25lKHRoaXMucGFsZXR0ZSwgdGhpcy56b25lKTtcclxuXHJcbiAgICAvLyBhc3NpZ24gdGhlIFBhbGV0dGUncyBkaXYsIHdoaWNoIChhbW9uZyBtYW55IG90aGVyIHRoaW5ncykgd2lsbCBhdHRhY2ggYSBidW5jaCBvZiBsaXN0ZW5lcnMgdG8gdGhlIGNhbnZhcyxcclxuICAgIC8vIHVzaW5nIHRoZSBvdmVycmlkZGVuIGFkZEV2ZW50TGlzdGVuZXIgZnVuY3Rpb24gYWJvdmVcclxuICAgIGNvbnN0IGRpdlJlZiA9IHRoaXMucGFsZXR0ZURpdi5uYXRpdmVFbGVtZW50O1xyXG4gICAgaWYgKGRpdlJlZiA9PSBudWxsKSByZXR1cm47XHJcbiAgICB0aGlzLnBhbGV0dGUuZGl2ID0gZGl2UmVmO1xyXG5cclxuICAgIC8vIGluaXRpYWxpemUgcGFsZXR0ZSBtb2RlbFxyXG4gICAgTmdEaWFncmFtSGVscGVyLmluaXRpYWxpemVNb2RlbCh0aGlzLnBhbGV0dGUsIHRoaXMubm9kZURhdGFBcnJheSwgdGhpcy5saW5rRGF0YUFycmF5LCB0aGlzLm1vZGVsRGF0YSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBJZiBhIGNoYW5nZSBoYXMgb2NjdXJlZCBvbiBhbiBASW5wdXQgcHJvcGVydHksIG1lcmdlIHRoZSBhcHAtbGV2ZWwgY2hhbmdlcyB3aXRoIEdvSlNcclxuICAgKi9cclxuICBwdWJsaWMgbmdPbkNoYW5nZXMoKSB7XHJcbiAgICBpZiAoIXRoaXMucGFsZXR0ZSB8fCAhdGhpcy5wYWxldHRlLm1vZGVsKSByZXR1cm47XHJcbiAgICBOZ0RpYWdyYW1IZWxwZXIubWVyZ2VBcHBEYXRhV2l0aE1vZGVsKHRoaXMpO1xyXG4gIH0gLy8gZW5kIG5nT25DaGFuZ2VzIFxyXG4gIFxyXG5cclxuICBwdWJsaWMgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICB0aGlzLnBhbGV0dGUuZGl2ID0gbnVsbDsgLy8gcmVtb3ZlcyBldmVudCBsaXN0ZW5lcnNcclxuICB9XHJcblxyXG59XHJcbiJdfQ==