import { Component, ElementRef, EventEmitter, Input, NgZone, Output, ViewChild } from '@angular/core';
import * as go from 'gojs';
import { NgDiagramHelper } from './ng-diagram-helper';
import * as i0 from "@angular/core";
export class DiagramComponent {
    constructor(zone) {
        this.zone = zone;
        /**  Link data for diagram. Optional. */
        this.linkDataArray = null;
        /** Model data for diagram. Optional. */
        this.modelData = null;
        /** Model changed listener function for diagram */
        this.modelChangedListener = null;
        /** Whether or not to skip merging app data with GoJS model data (set to true if update is coming from GoJS, false if coming from app-level, usually) */
        this.skipsDiagramUpdate = false;
        /** Event emitter -- fires when diagram model changes. Capture this emitted event in parent component */
        this.modelChange = new EventEmitter();
        /** The Diagram itself */
        this.diagram = null;
        /** An internal flag used to tell ngOnChanges to treat the next sync operation as a Diagram initialization */
        this.wasCleared = false;
    }
    /**
     * Initializes diagram / model after view init
     */
    ngAfterViewInit() {
        if (!this.diagramDiv) {
            throw new Error("diagramDiv is not defined");
        }
        this.diagram = this.initDiagram();
        if (!(this.diagram instanceof go.Diagram)) {
            throw new Error("initDiagram function did not return a go.Diagram");
        }
        // reduces change detection on mouse moves, boosting performance
        NgDiagramHelper.makeMouseMoveRunOutsideAngularZone(this.diagram, this.zone);
        // assign the Diagram's div, which (among many other things) will attach a bunch of listeners to the canvas,
        // using the overridden addEventListener function defined in makeMouseMoveRunOutsideAngularZone
        const divRef = this.diagramDiv.nativeElement;
        if (divRef === null)
            return;
        this.diagram.div = divRef;
        // initialize the diagram model with the provided node / link / model data
        NgDiagramHelper.initializeModel(this.diagram, this.nodeDataArray, this.linkDataArray, this.modelData);
        // initializer model listener
        NgDiagramHelper.initializeModelChangedListener(this);
    } // end ngAfterViewInit
    /**
     * If a change has occurred on an @Input property, merge the app-level changes with GoJS
     */
    ngOnChanges() {
        if (!this.diagram || !this.diagram.model || this.skipsDiagramUpdate)
            return;
        // if clear was just called, treat this as initial
        if (this.wasCleared) {
            this.diagram.delayInitialization(() => {
                NgDiagramHelper.mergeAppDataWithModel(this, true);
            });
            this.wasCleared = false;
        }
        else {
            NgDiagramHelper.mergeAppDataWithModel(this);
        }
    } // end ngOnChanges
    /**
     * Clears the diagram of all nodes, links, and model data.
     * Also clears the UndoManager history and clipboard.
     * The next state update will be treated as diagram initialization.
     */
    clear() {
        const diagram = this.diagram;
        if (diagram !== null) {
            diagram.clear();
            this.wasCleared = true;
        }
    } // end clear function
    /**
     * Set this.diagram.div to null, removing all event listeners
     */
    ngOnDestroy() {
        this.diagram.div = null; // removes event listeners
    } // end ngOnDestroy function
}
/** @nocollapse */ DiagramComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.2", ngImport: i0, type: DiagramComponent, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ DiagramComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.1.2", type: DiagramComponent, selector: "gojs-diagram", inputs: { initDiagram: "initDiagram", nodeDataArray: "nodeDataArray", linkDataArray: "linkDataArray", modelData: "modelData", divClassName: "divClassName", skipsDiagramUpdate: "skipsDiagramUpdate" }, outputs: { modelChange: "modelChange" }, viewQueries: [{ propertyName: "diagramDiv", first: true, predicate: ["ngDiagram"], descendants: true, static: true }], usesOnChanges: true, ngImport: i0, template: '<div #ngDiagram [className]=divClassName></div>', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.2", ngImport: i0, type: DiagramComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'gojs-diagram',
                    template: '<div #ngDiagram [className]=divClassName></div>'
                }]
        }], ctorParameters: function () { return [{ type: i0.NgZone }]; }, propDecorators: { initDiagram: [{
                type: Input
            }], nodeDataArray: [{
                type: Input
            }], linkDataArray: [{
                type: Input
            }], modelData: [{
                type: Input
            }], divClassName: [{
                type: Input
            }], skipsDiagramUpdate: [{
                type: Input
            }], modelChange: [{
                type: Output
            }], diagramDiv: [{
                type: ViewChild,
                args: ['ngDiagram', { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,